import os
import mysql.connector
from mysql.connector import Error

def get_db_connection():
    try:
      port_num = int(os.getenv('DB_PORT'))
      conn = mysql.connector.connect(
          host=os.getenv('DB_HOST'),
          port=port_num,
          user=os.getenv('DB_USER'),
          password=os.getenv('DB_PASSWORD'),
          database=os.getenv('DB_NAME'),
      )
      return conn
    except Error as e:
        print(f"Error connecting to MySQL: {e}")
        return None

def find_user_by_email(email):
    conn = get_db_connection()
    if not conn:
        return None
    
    user_record = None
    try:
        cursor = conn.cursor()
        cursor.execute("SELECT UserID, PasswordHash FROM users WHERE Email = %s", (email,))
        user_record = cursor.fetchone() # Fetches one record, e.g., (1, 'some_hash_string')
    except Error as e:
        print(f"Error in find_user_by_email: {e}")
        if conn.is_connected():
            conn.rollback()
    finally:
        if conn.is_connected():
            cursor.close()
            conn.close()
    return user_record

def create_user(username, email, hashed_password):
    conn = get_db_connection()
    if not conn:
        return False
        
    success = False
    try:
        cursor = conn.cursor()
        cursor.execute("INSERT INTO users (Username, Email, PasswordHash) VALUES (%s, %s, %s)", (username, email, hashed_password))
        conn.commit()
        success = True
    except Error as e:
        print(f"Error in create_user: {e}")
        if conn.is_connected():
            conn.rollback()
    finally:
        if conn.is_connected():
            cursor.close()
            conn.close()
    return success

def get_user_profile_by_id(user_id):
    conn = get_db_connection()
    if not conn:
        return None

    user_profile = None
    try:
        cursor = conn.cursor(dictionary=True)
        cursor.execute("SELECT UserID, Username, Email, RegistrationTimestamp FROM users WHERE UserID = %s", (user_id,))
        user_profile = cursor.fetchone()
    except Error as e:
        print(f"Error in get_user_profile_by_id: {e}")
    finally:
        if conn.is_connected():
            cursor.close()
            conn.close()
    return user_profile

def create_poll(user_id, question, options):
    conn = get_db_connection()
    if not conn:
        return False

    success = False
    try:
        cursor = conn.cursor()
        cursor.execute("INSERT INTO Posts (AuthorUserID, PostType, Title) VALUES (%s, %s, %s)", (user_id, "Poll",  question))
        post_id = cursor.lastrowid
        
        for option in options:
            cursor.execute("INSERT INTO PollOptions (PostID, OptionText) VALUES (%s, %s)", (post_id, option))
        
        conn.commit()
        success = True
    except Error as e:
        print(f"Error in create_poll: {e}")
        if conn.is_connected():
            conn.rollback()
    finally:
        if conn.is_connected():
            cursor.close()
            conn.close()
    return success

def collate_polls(user_id):
    conn = get_db_connection()
    if not conn:
        return []

    polls = {}
    try:
        cursor = conn.cursor(dictionary=True)
        #Query generated by Copilot
        query = """
            SELECT 
                p.PostID, 
                p.Title,
                p.CreationTimestamp,
                u.Username AS AuthorUsername,
                po.OptionID,
                po.OptionText,
                po.VoteCount
            FROM Posts p
            JOIN Users u ON p.AuthorUserID = u.UserID
            LEFT JOIN PollOptions po ON p.PostID = po.PostID
            WHERE p.PostType = 'Poll'
            ORDER BY p.CreationTimestamp DESC;
        """
        cursor.execute(query)
        all_poll_rows = cursor.fetchall()
        
        cursor.execute("SELECT PostID FROM Votes WHERE UserID = %s", (user_id,))
        # Results go into a set for fast af lookups
        user_voted_posts = {row['PostID'] for row in cursor.fetchall()}
        
        for row in all_poll_rows:
            post_id = row['PostID']
            if post_id not in polls:
                polls[post_id] = {
                    "PostID": post_id,
                    "Title": row['Title'],
                    "CreationTimestamp": row['CreationTimestamp'],
                    "AuthorUsername": row['AuthorUsername'],
                    "Options": [],
                    "userHasVoted": post_id in user_voted_posts
                }
            if row['OptionID'] is not None:
                polls[post_id]["Options"].append({
                    "OptionID": row['OptionID'],
                    "OptionText": row['OptionText'],
                    "VoteCount": row['VoteCount']
                })
    except Error as e:
        print(f"Error in collate_polls: {e}")
        return []
    finally:
        if conn.is_connected():
            cursor.close()
            conn.close()
            
    return list(polls.values())